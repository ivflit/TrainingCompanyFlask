name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  # Job to run tests
  test:
    runs-on: ubuntu-latest

    steps:
    # Check out the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    # Load environment variables from .env file
    - name: Load environment variables
      env:
        JWT_SECRET: ${{ secrets.JWT_SECRET}}
      run: |
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV

    # Set AWS environment variables
    - name: Set AWS credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> $GITHUB_ENV

    # Install dependencies for all services
    - name: Install dependencies
      run: |
        pip install pytest
        pip install -r api_gateway/requirements.txt
        pip install -r frontend/requirements.txt
        pip install -r microservices/authentication_service/requirements.txt
        pip install -r microservices/booking_service/requirements.txt
        pip install -r microservices/course_service/requirements.txt
        pip install -r microservices/schedule_service/requirements.txt
        pip install -r microservices/student_service/requirements.txt
        pip install -r microservices/trainer_service/requirements.txt

    # Run tests for all services
    - name: Run tests
      run: |
        python -m pytest tests/test_authentication_service.py || exit 1
        python -m pytest tests/test_course_service.py || exit 1
        python -m pytest tests/test_student_service.py || exit 1
        python -m pytest tests/test_trainer_service.py || exit 1
        python -m pytest tests/test_api_gateway.py || exit 1
        python -m pytest tests/test_frontend.py || exit 1

  # Job to deploy to EC2
  deploy:
    runs-on: ubuntu-latest
    needs: test  # Ensure deployment only happens if tests pass

    steps:
    # Check out the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Set up SSH agent and add private key
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    # SSH into EC2 and deploy
    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ${{ secrets.EC2_PROJECT_PATH }}

          # Check if any Docker containers are running
          if [ "$(docker ps -q)" ]; then
            echo "Stopping running containers..."
            docker-compose down
          fi

          # Pull the latest code from GitHub
          echo "Pulling latest code..."
          git pull origin master  # Use 'master' to pull the latest from the main branch

          # Rebuild and run the containers
          echo "Running docker-compose..."
          docker-compose up --build -d
        EOF
